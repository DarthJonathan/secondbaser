// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionalRequestClient is the client API for TransactionalRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionalRequestClient interface {
	StartTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	RegisterParticipant(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	QueryTransactionStatus(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	CommitTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	RollbackTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type transactionalRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionalRequestClient(cc grpc.ClientConnInterface) TransactionalRequestClient {
	return &transactionalRequestClient{cc}
}

func (c *transactionalRequestClient) StartTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/id.lovtalk.posts.service.api.TransactionalRequest/StartTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionalRequestClient) RegisterParticipant(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/id.lovtalk.posts.service.api.TransactionalRequest/RegisterParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionalRequestClient) QueryTransactionStatus(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/id.lovtalk.posts.service.api.TransactionalRequest/QueryTransactionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionalRequestClient) CommitTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/id.lovtalk.posts.service.api.TransactionalRequest/CommitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionalRequestClient) RollbackTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/id.lovtalk.posts.service.api.TransactionalRequest/RollbackTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionalRequestServer is the server API for TransactionalRequest service.
// All implementations should embed UnimplementedTransactionalRequestServer
// for forward compatibility
type TransactionalRequestServer interface {
	StartTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	RegisterParticipant(context.Context, *TransactionRequest) (*TransactionResponse, error)
	QueryTransactionStatus(context.Context, *TransactionRequest) (*TransactionResponse, error)
	CommitTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	RollbackTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
}

// UnimplementedTransactionalRequestServer should be embedded to have forward compatible implementations.
type UnimplementedTransactionalRequestServer struct {
}

func (UnimplementedTransactionalRequestServer) StartTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTransaction not implemented")
}
func (UnimplementedTransactionalRequestServer) RegisterParticipant(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterParticipant not implemented")
}
func (UnimplementedTransactionalRequestServer) QueryTransactionStatus(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransactionStatus not implemented")
}
func (UnimplementedTransactionalRequestServer) CommitTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTransaction not implemented")
}
func (UnimplementedTransactionalRequestServer) RollbackTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackTransaction not implemented")
}

// UnsafeTransactionalRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionalRequestServer will
// result in compilation errors.
type UnsafeTransactionalRequestServer interface {
	mustEmbedUnimplementedTransactionalRequestServer()
}

func RegisterTransactionalRequestServer(s grpc.ServiceRegistrar, srv TransactionalRequestServer) {
	s.RegisterService(&TransactionalRequest_ServiceDesc, srv)
}

func _TransactionalRequest_StartTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionalRequestServer).StartTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.lovtalk.posts.service.api.TransactionalRequest/StartTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionalRequestServer).StartTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionalRequest_RegisterParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionalRequestServer).RegisterParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.lovtalk.posts.service.api.TransactionalRequest/RegisterParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionalRequestServer).RegisterParticipant(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionalRequest_QueryTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionalRequestServer).QueryTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.lovtalk.posts.service.api.TransactionalRequest/QueryTransactionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionalRequestServer).QueryTransactionStatus(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionalRequest_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionalRequestServer).CommitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.lovtalk.posts.service.api.TransactionalRequest/CommitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionalRequestServer).CommitTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionalRequest_RollbackTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionalRequestServer).RollbackTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.lovtalk.posts.service.api.TransactionalRequest/RollbackTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionalRequestServer).RollbackTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionalRequest_ServiceDesc is the grpc.ServiceDesc for TransactionalRequest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionalRequest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "id.lovtalk.posts.service.api.TransactionalRequest",
	HandlerType: (*TransactionalRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTransaction",
			Handler:    _TransactionalRequest_StartTransaction_Handler,
		},
		{
			MethodName: "RegisterParticipant",
			Handler:    _TransactionalRequest_RegisterParticipant_Handler,
		},
		{
			MethodName: "QueryTransactionStatus",
			Handler:    _TransactionalRequest_QueryTransactionStatus_Handler,
		},
		{
			MethodName: "CommitTransaction",
			Handler:    _TransactionalRequest_CommitTransaction_Handler,
		},
		{
			MethodName: "RollbackTransaction",
			Handler:    _TransactionalRequest_RollbackTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TransactionalService.proto",
}
